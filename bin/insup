#!/usr/bin/env ruby

require 'gli'
require 'i18n'
require 'i18n/backend/fallbacks'

require_relative '../lib/insup/version'
require_relative '../lib/insup/console'
require_relative '../lib/insup/locale_parser'

I18n::Backend::Simple.send(:include, I18n::Backend::Fallbacks)
include GLI::App

I18n.load_path = Dir.glob(File.expand_path('../../lib/translations/*.yml', __FILE__))
I18n.backend.load_translations
I18n.enforce_available_locales = false
I18n.config.locale = Insup::LocaleParser.locale

program_desc I18n.t('app.name')
version Insup::VERSION
flag [:c, :config], default_value: '.insup'
switch [:v, :verbose], desc: I18n.t('app.global_params.verbose')
switch [:d, :debug], desc: I18n.t('app.global_params.debug')

pre do |global_options|
  settings_file = global_options[:config]
  verbose = global_options[:verbose]
  debug = global_options[:debug]
  ENV['GLI_DEBUG'] = 'true' if debug

  Insup::Console.start(settings_file, verbose, debug)
end

on_error do |ex|
  puts ex.message
  Insup::Console.process_error(ex)
  false
end

desc 'Initialize the directory with insup file'
arg_name 'directory', [:optional]
command :init do |c|
  c.action do |_, _, args|
    Insup::Console.init(args[0])
  end
end

desc 'Show current status of working directory according to the selected tracker'
command :status do |c|
  c.action do
    Insup::Console.status
  end
end

desc 'Print current config and exit'
command :config do |c|
  c.action do
    Insup::Console.print_config
  end
end

desc 'Show tracked locations'
command 'list-locations' do |c|
  c.action do
    Insup::Console.list_locations
  end
end

desc 'List files under tracked locations'
command 'list-files' do |c|
  c.switch [:a, :all], desc: 'List all files, including ignored ones', negatable: false
  c.switch [:i, :ignored], desc: 'List only ignored files', negatable: false

  c.action do |_, options|
    if options[:all]
      Insup::Console.list_files(mode: :all)
    elsif options[:ignored]
      Insup::Console.list_files(mode: :ignored)
    else
      Insup::Console.list_files
    end
  end
end

desc 'Apply changes to the remote storage'
arg_name 'file', [:optional, :multiple]
command :commit do |c|
  c.action do |_, _, args|
    Insup::Console.commit(args)
  end
end

desc 'Initialize listen mode'
command :listen do |c|
  c.action do
    Insup::Console.listen
  end
end

desc 'Tasks related to Insales'
command :insales do |c|
  c.default_command 'list-themes'
  c.desc 'List themes in the current Insales shop'
  c.command 'list-themes' do |sc|
    sc.action do
      Insup::Console.insales_list_themes
    end
  end

  c.desc 'Download theme files to current directory'
  c.command 'download' do |sc|
    sc.switch [:f, :force], desc: 'Overwrite existing files without prompt'
    sc.flag [:t, :theme], desc: 'Insales theme id', default_value: nil
    sc.action do |_, options|
      Insup::Console.insales_download_theme(options[:force], options[:theme])
    end
  end
end

default_command :listen

exit run(ARGV)
